Опа диплом
 

СОДЕРЖАНИЕ
ВВЕДЕНИЕ.............................................................................................................. 3 1. АНАЛИЗ ОТЕЧЕСТВЕННЫХ НАУЧНЫХ ИСТОЧНИКОВ ПО ТЕМЕ ИССЛЕДОВАНИЯ.................................................................................................. 6 1.1. DEVOPS В ЭПОХУ ОБЛАЧНЫХ ТЕХНОЛОГИЙ: СОВРЕМЕННЫЕ ПРАКТИКИ И ПЕРСПЕКТИВЫ РАЗВИТИЯ 6 1.2. АВТОМАТИЗАЦИЯ И ОПТИМИЗАЦИЯ ПРОЦЕССОВ РАЗРАБОТКИ И РАЗВЕРТЫВАНИЯ В DEVOPS: ПРИМЕНЕНИЕ СОВРЕМЕННЫХ МЕТОДОВ И ИНСТРУМЕНТОВ 8 2. АНАЛИЗ ЗАРУБЕЖНЫХ НАУЧНЫХ ИСТОЧНИКОВ ПО ТЕМЕ ИССЛЕДОВАНИЯ................................................................................................ 11 2.1. MICROSERVICE DEPLOYMENT 11 2.2. State of Devops 2023 14 2.3. GitOps: A Path to More Self-service IT: IaC + PR = GitOps 16 ЗАКЛЮЧЕНИЕ ..................................................................................................... 18 СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ ........................................... 19

ВВЕДЕНИЕ	3
1 ТЕОРЕТИЧЕСКИЕ ОСНОВЫ ИССЛЕДОВАНИЯ GITOPS КАК МЕТОДОЛОГИИ	6
1.1 Концепция GitOps и её основные принципы	6
1.2	Отличия GitOps от традиционных методов CI/CD	7
1.3	Роль GitOps в обеспечении процессов развертывания	8
2	МЕТОДОЛОГИЯ ПРОВЕДЕНИЯ ЭКСПЕРИМЕНТАЛЬНОГО ИССЛЕДОВАНИЯ	11
2.1 Обоснование выбора критериев оценки эффективности GitOps-решений	11
2.2	Разработка методики проведения сравнительного анализа	12
2.3	Проектирование тестового стенда	13
2.4	Определение метрик и показателей эффективности	14
2.5	Выбор инструментов мониторинга и сбора данных	15
3	РАЗРАБОТКА ЭКСПЕРИМЕНТАЛЬНОГО СТЕНДА	16
3.1 Архитектура тестового веб-приложения	16
3.2	Реализация базовой инфраструктуры	17
3.3	Настройка выбранных GitOps-инструментов	20
3.4 Разработка сценариев тестирования	23
3.5 Автоматизация процессов сбора и анализа данных	24
4	ПРОВЕДЕНИЕ ЭКСПЕРИМЕНТАЛЬНОГО ИССЛЕДОВАНИЯ	26
4.1 Реализация тестовых сценариев развертывания	26
4.3 Анализ производительности GitOps-решений	28
4.4 Оценка побочных эффектов и ограничений	30
4.5 Формирование рекомендаций по применению GitOps-подходов	30
ЗАКЛЮЧЕНИЕ	31
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	32


ВВЕДЕНИЕ	3
1 ТЕОРЕТИЧЕСКИЕ ОСНОВЫ ИССЛЕДОВАНИЯ GITOPS КАК МЕТОДОЛОГИИ	7
1.1 Концепция GitOps и её основные принципы	7
1.2 Роль GitOps в обеспечении процессов развертывания	8
2	МЕТОДОЛОГИЯ ПРОВЕДЕНИЯ ЭКСПЕРИМЕНТАЛЬНОГО ИССЛЕДОВАНИЯ	10
2.1 Обоснование выбора критериев оценки эффективности GitOps-решений	10
2.2 Разработка методики проведения сравнительного анализа	11
2.3 Проектирование тестового стенда	12
2.4 Определение метрик и показателей эффективности	13
2.5 Выбор инструментов мониторинга и сбора данных	14
3	РАЗРАБОТКА ЭКСПЕРИМЕНТАЛЬНОГО СТЕНДА	15
3.1 Архитектура тестового веб-приложения	15
3.2 Реализация базовой инфраструктуры	16
3.3 Настройка выбранных GitOps-инструментов	19
3.4 Разработка сценариев тестирования	22
3.5 Автоматизация процессов сбора и анализа данных	23
4	ПРОВЕДЕНИЕ ЭКСПЕРИМЕНТАЛЬНОГО ИССЛЕДОВАНИЯ	25
4.1 Реализация тестовых сценариев развертывания	25
4.3 Анализ производительности GitOps-решений	27
4.4 Оценка побочных эффектов и ограничений	28
4.5 Формирование рекомендаций по применению GitOps-подходов	29
ЗАКЛЮЧЕНИЕ	30
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	31

 
Введение

С момента изобретения сети интернет число пользователей и воспроизводимого контента постоянно увеличивалось. В 1993 году в интернете насчитывалось всего лишь 130 сайтов, которыми пользовались около 3 млн человек. В 2014-м сайтов впервые стало больше миллиарда, а в 2023-м их количество перевалило за 2млрд. И, хотя около 75% из них не активны, каждый день это количество приумножается — примерно на 550 тысяч. Такой бурный рост был бы невозможен без заинтересованности бизнеса в этой технологии и распространении различных видов пользовательских устройств: ноутбуков, планшетных компьютеров, смартфонов. Чтобы создать веб-сайт, который будет выгодно смотреться на фоне конкурентов и поможет привлечь больше клиентов, необходимо разрабатывать качественное программное обеспечение, являющееся эффективным и безопасным [7]. Многие разработчики применяют стратегии непрерывной интеграции и непрерывной доставки (CI/CD) для улучшения процессов разработки программного обеспечения. Конвейеры CI/CD позволяют автоматизировать тестирование, развертывание и доставку программного обеспечения, что приводит к ускорению циклов выпуска, снижению затрат и снижению рисков разработки. Следующие ключевые моменты, которые следует учитывать в отношении эволюции CI/CD: Конвейеры CI/CD постоянно развиваются вместе с изменениями в отрасли и развитием технологий. По мере развития технологического пространства и появления новых инноваций ожидается, что традиционный конвейер CI/CD будет развиваться и адаптироваться к этим изменения. Интеграция принципов проектирования надежности объектов (SRE) с CI/CD становится необходимой для полной реализации потенциала CD в масштабе. Принципы SRE ориентированы на надежность, отказоустойчивость и масштабируемость, а их интеграция с CD может помочь решить проблемы, связанные с повышенными потребностями в отказоустойчивости, угрозами безопасности и интеграцией данных в 4 программные продукты. Будущее CI/CD движется к DevOps, управляемому данными, где большие объемы данных, генерируемые инструментами CI/CD, эффективно используются для ускорения циклов и улучшения бизнесприложений. Используя данные, организации могут принимать обоснованные решения и постоянно совершенствовать процессы разработки программного обеспечения. Поэтому, мире разработки программного обеспечения, важно понимать методологии, обеспечивающие и автоматизированные процессы CI/CD. GitOps, как перспективный подход к управлению инфраструктурой и приложениями, реализующий принципы DevOps посредством использования систем контроля версий, является ключевым инструментом для достижения этих целей. Основная цель данного этапа научно-исследовательской работы заключается в разработке критериев для оценки соответствия реализаций GitOps-подходов критериям процесса развертывания веб-приложений в рамках практики CI/CD и последующей проверке существующих решений на соответствие этим требованиям. В рамках этого исследования будет проведен теоретический обзор следующих аспектов: изучение и анализ концепции GitOps, её основных принципов и отличий от традиционных методов CI/CD, роль GitOps в обеспечении процессов развертывания. Теоретические знания будут основаны на анализе научной и технической литературы, обзоров и исследовательских статей, включая источники, такие как eLIBRARY, CyberLeninka, а также публикации в авторитетных научных журналах и на конференциях. Также в исследовании будут определены требования к развертыванию, формулировка четких и измеримых критериев, которым должны соответствовать реализации GitOps подходов. Эти критерии могут включать степень автоматизации процесса, надежность, безопасность, масштабируемость, управляемость конфигурацией, интеграцию с существующими системами и инструментарием, скорость и простоту развертывания.
 

Рис.1. Данные опроса из исследования State of Devops 2023 [4]

 
1 ТЕОРЕТИЧЕСКИЕ ОСНОВЫ ИССЛЕДОВАНИЯ GITOPS КАК МЕТОДОЛОГИИ
1.1 Концепция GitOps и её основные принципы
Одной из самых ранних и знаковых статей по методологии GitOps является работа «GitOps: A Path to More Self-service IT: IaC + PR = GitOps» [2], в которой вводятся основные понятия GitOps и описывается рабочий процесс, характеризующийся следующими элементами:
1. Конфигурация хранится в системе контроля версий:
   - вся конфигурация процесса (инфраструктура как код - IaC) хранится в Git или другой системе контроля версий. Файлы конфигурации описываются в декларативном языке, что позволяет производить идемпотентные обновления.
2. Открытые запросы на изменения: 
   - любой пользователь, даже не входящий в команду (например, клиенты), может отправлять запросы на изменения в виде Pull Request (PR). Доступна документация для пользователей, которая помогает ознакомиться с процессом.
3. Автоматизированные тесты:
   - система CI автоматически запускает тесты для проверки файлов конфигурации и PR, а также после успешного утверждения PR.
4. Одобрение и запуск CI/CD:
   - после утверждения PR человеком система CI/CD производит автоматические тесты. Некоторые тесты могут выполняться вручную, но постепенно они автоматизируются.
5. Развертывание изменений:
   - когда PR одобрен, и все тесты пройдены, система CD внедряет изменения в производство.
Этот метод уменьшает усилия, необходимые для управления версиями и процессами в ИТ-системах, и способствует автоматизации инфраструктуры. В результате снижается время ожидания, повышается качество тестирования и продуктивность ИТ-команд. Также GitOps стимулирует улучшение практик и снижает риски, связанные с "Bus factor", когда критические знания сосредоточены в узком круге сотрудников. Применение GitOps позволяет большую часть логики инфраструктуры обрабатывать программно и снижает необходимость ручного труда. Благодаря GitOps, процесс разработки и развертывания становится более быстрым и надежным, что особо критично в современных условиях увеличивающихся требований к скорости и надежности развертывания веб-приложений.
	 Отличия GitOps от традиционных методов CI/CD
GitOps и традиционные методы CI/CD имеют схожие цели — автоматизация и упрощение процесса развертывания программного обеспечения, но существенно отличаются в подходах, которые они используют. Важным аспектом отличий является фокус и цель каждого из методов. GitOps, главным образом, занимается декларативным управлением конфигурациями инфраструктуры и приложений, используя репозитории Git как основной источник истины. Вся конфигурация процесса (инфраструктура как код — IaC) хранится в Git, что позволяет легко отслеживать изменения и управлять состояниями системы через фиксированные изменения. В то время как CI/CD охватывает весь жизненный цикл разработки программного обеспечения, включая компиляцию кода, тестирование, упаковку и развертывание в различных средах, GitOps сосредоточен преимущественно на управлении инфраструктурой и конфигурацией приложений [9]. В традиционном процессе CI/CD разработчики отправляют новые изменения кода в систему контроля версий; сервер CI запускает автоматизированные тесты и, при успешном прохождении, отправляет изменения в репозиторий образов контейнеров, после чего инструмент автоматического развертывания разворачивает новый контейнер в производственной среде. В GitOps процесс CI аналогичен, но развертывание осуществляется иначе: используется подход «pull», в котором агент GitOps обнаруживает изменения в репозитории и синхронизирует их с производственной средой. Важно отметить, что в GitOps Git выступает единственным источником достоверности для всех изменений инфраструктуры и приложений. Все изменения осуществляются посредством запросов на извлечение (Pull Requests), которые автоматически развертываются в рабочей среде. В CI/CD основным источником достоверности является репозиторий кода, используемый для сборки и тестирования программного обеспечения перед его развертыванием в производство [5]. Автоматизация в обоих подходах играет ключевую роль, но с разной степенью упрощения процессов. В GitOps любые изменения, утвержденные и объединенные в основную ветку, автоматически внедряются в производство, что облегчает управление инфраструктурой как кодом (IaC). В традиционном CI/CD существует несколько этапов автоматизации, включая сборку, тестирование и развертывание, что может усложнять процесс управления в случае необходимости срочных откатов или различных вариантов конфигурации. Откаты в GitOps выполняются легко и прямолинейно благодаря фиксации всех изменений в Git; если возникает проблема при развертывании, можно просто вернуться к предыдущей версии кода. В CI/CD откаты могут быть более сложными и включать несколько этапов автоматизации, что требует большего количества времени и ресурсов для устранения проблем. Организации могут использовать как GitOps, так и CI/CD для создания эффективных и автоматизированных конвейеров доставки программного обеспечения, обеспечивая высокую производительность и надежность.
	 Роль GitOps в обеспечении процессов развертывания
GitOps привносит значительные преимущества в сферу автоматизации инфраструктуры и процессов развертывания, обеспечивая бесшовность и эффективное управление системами. Использование GitOps позволяет интегрировать лучшие практики DevOps для автоматизации всей инфраструктуры, что в свою очередь повышает уровень сотрудничества и коммуникации между командами разработки и эксплуатации. Ключевым аспектом методологии GitOps, как и в DevOps, является использование систем контроля версий, таких как Git, для управления кодом. Это становится особенно актуально с применением инструментов непрерывной интеграции и непрерывной доставки, таких как GitHub Actions и Jenkins, которые автоматизируют процесс сборки, тестирования и развертывания изменений в производственных средах. В GitOps применяются методы DevOps для автоматизации управления инфраструктурой, включая управление ресурсами как кодом (IaC) и хранение их в репозиториях Git. Все изменения в инфраструктуре автоматически тестируются и развертываются контролируемым и повторяемым образом, что обеспечивает надежность и устойчивость системы. GitOps использует Git в качестве единственного источника истины об инфраструктуре, что позволяет обеспечить безопасность и управляемость изменений [6].  Принципы GitOps включают декларативность, версионность, неизменяемость, автоматическое извлечение и непрерывное согласование. В GitOps инфраструктура описывается как код, что позволяет декларативно объявлять желаемое состояние компонентов инфраструктуры. Kubernetes дополнительно описывает состояние кластера через манифесты, обеспечивая управление версиями. Компоненты в кластере синхронизируют это декларативное состояние, повышая безопасность и поддерживая принцип наименьших привилегий. Для Kubernetes, GitOps обеспечивает надежное и версионное управление инфраструктурой кластера. Использование GitOps также позволяет существенно повысить производительность процессов DevOps и сократить время на откат непредсказуемых изменений, поскольку все изменения фиксируются в Git. [7] Преимущества GitOps включают в себя улучшенную безопасность и надежность инфраструктуры благодаря контролируемым утверждениям и легкости отслеживания изменений. Для эффективного использования GitOps необходимо знание систем контроля версий, автоматизации и инструментов GitOps, таких как Flux и Argo CD. Таким образом, GitOps обеспечивает процесс развертывания, делая инфраструктуру более предсказуемой и управляемой. Это достигается за счет интеграции практик DevOps в процесс управления инфраструктурой и автоматизации развертываний, что в конечном счете повышает общую эффективность и надежность системы. 
	ОПРЕДЕЛЕНИЕ ТРЕБОВАНИЙ К РАЗВЕРТЫВАНИЮ
2.1 Формирование системы критериев для оценки реализации GitOps
Для оценки реализаций GitOps в контексте развертывания важно установить конкретные критерии, которые позволят определить эффективность и надежность внедренных решений. Прежде всего, следует учитывать, что GitOps использует лучшие практики DevOps для автоматизации управления инфраструктурой, а также накладывает особенный акцент на использование Git в качестве единственного источника истины [6]. Первым шагом в формулировке критериев для оценки реализаций GitOps является определение аспектов, связанных с декларативностью и версионностью инфраструктуры. Инфраструктура как код (IaC), используемая в GitOps, позволяет декларативно объявлять желаемое состояние компонентов, что требует от системы способности легко управлять версиями и откатывать изменения в случае непредсказуемых ситуаций. Декларативность подразумевает, что состояние системы всегда можно сверить с описанием в репозитории Git, обеспечивая согласованность и предсказуемость процессов развертывания [10]. Вторым критерием является автоматизация развертывания и мониторинг состояния. Инструменты GitOps, должны поддерживать автоматическое извлечение и непрерывное согласование состояния инфраструктуры, обеспечивая, что изменения, утвержденные в репозитории, автоматически внедряются в среду эксплуатации. Также важно оценивать возможности инструментов по мониторингу и оповещению о несоответствиях между текущим и желаемым состоянием, а также по автоматическому внесению корректив [8]. Третьим критерием является безопасность и управление доступом. Поскольку GitOps использует системы контроля версий для управления всей инфраструктурой и конфигурациями приложений, важно обеспечивать безопасность через механизмы контролируемого утверждения и минимизации прав пользователей. Это включает в себя использование принципов наименьших привилегий и разграничение прав доступа, что предотвращает неконтролируемые изменения. Следующий важный критерий — производительность и масштабируемость решений GitOps. Для этого необходимо оценить, как решения справляются с высокими нагрузками и масштабированием, а также насколько эффективно они синхронизируют изменения в крупных распределенных системах. Производительность можно измерять через такие метрики, как время реакции на изменения, количество операций в секунду (OPS) и потребление системных ресурсов [6]. Наконец, критически важно учитывать параметры стабильности и надежности. В этом случае оценка будет включать количество и частоту ошибок, крашей, а также способность системы быстро возвращаться в стабильное состояние после возникновения непредсказуемых сбоев. GitOps должен предоставлять инструменты для детектирования и быстрого реагирования на проблемы, обеспечивая непрерывную работу инфраструктуры и минимизируя время простоя. На основании этих критериев можно сформулировать список метрик и тестов для оценки реализаций GitOps:
	Декларативность и версионность: проверка возможности точного отслеживания изменений и легкости отката.
	Автоматизация развертывания: измерение времени, необходимого для автоматического применения изменений и синхронизации состояния.
	Безопасность и управление доступом: оценка методов проверки и утверждения изменений, разграничения прав доступа.
	Производительность и масштабируемость: замер времени реакции на изменения, количество операций в секунду, потребление системных ресурсов.
	Стабильность и надежность: анализ частоты ошибок и способности системы к быстрому восстановлению.
 Эти аспекты помогут провести комплексную оценку реализаций GitOps, обеспечивая оптимальные условия для развертывания и управления инфраструктурой на всех этапах жизненного цикла программного обеспечения. Таким образом на основе установленных критериев составим сравнительную таблицу, для которой были выбраны несколько реализаций GitOps решений. Были рассмотрены GitHub, GitLab, Flux, GitVerse, GitFlic.
Таблица 1.
Сравнительный анализ GitOps решений
Свойство	GitHub	GitLab	Flux	GitVerse	GitFlic
Поддерживаемые репозитории	Публичные, приватные репозитории, групповые репозитории	Публичные, приватные репозитории, групповые репозитории	Git репозитории	Публичные, приватные репозитории, групповые репозитории	Публичные, приватные репозитории
Возможности управления конфигурациями	Хранение YAML, интеграции с Kubernetes	Хранение YAML, интеграции с Kubernetes, Ansible	Интеграция с Kustomize, Helm	Хранение YAML, интеграции с Kubernetes, Terraform, Ansible	Хранение YAML, интеграции с Kubernetes
Интеграция с CI/CD	GitHub Actions	Встроенный CI/CD	Интеграция с существующими CI/CD	Встроенный CI/CD	Встроенные инструменты для интеграции с CI/CD
Автоматическое развертывание	Через GitHub Actions	Через GitLab CI/CD	Автоматическое развертывание из Git	Через GitVerse CI/CD	Настройки автоматического развертывания через CI/CD
Мониторинг и оповещения	Интеграция с внешними инструментами	Встроенная интеграция с Prometheus, Grafana	Интеграция с Prometheus, Grafana	Интеграция с Prometheus, Grafana	Интеграция с популярными системами мониторинга
Обратная связь в реальном времени	Нотификации через вебхуки, мессенджеры	Нотификации в реальном времени через веб-интерфейс, мессенджеры	Обратная связь через логи и уведомления	Нотификации в реальном времени через веб-интерфейс, мессенджеры	Нотификации и вебхуки, уведомления через email и мессенджеры
Поддержка различных кластеров	AWS, GCP, Azure, on-premises	AWS, GCP, Azure, on-premises	Любой Kubernetes кластер	AWS, GCP, Azure, on-premises	Интеграция с облачными и on-premises кластерами
Управление секретами	Управление секретами в GitHub Actions	Защищенные переменные, секреты Kubernetes	Интеграция с SOPS, Kubernetes Secrets, Vault	Защищенные переменные, секреты Kubernetes	Хранение и управление секретами через защищенные переменные окружения
Автоматическое откатывание	Через GitHub Actions	Через CI/CD пайплайны	Поддержка откатов при ошибках	Поддержка откатов через CI/CD пайплайны	Механизмы откатов, настройка автоматического отката при ошибках развертывания
Возможность аудита и ведение журналов	История коммитов, журнал аудита событий	Логирование активности, отслеживание изменений	Логирование и аудит через Git и мониторинг	Логирование активности, журнал аудита событий	История коммитов, отслеживание изменений, аудит
Политики безопасности	Code Scanning, Secret Scanning, 2FA	Сканы безопасности, 2FA, RBAC	RBAC, управление доступом через Kubernetes	Сканы безопасности, 2FA, RBAC	Инструменты для сканирования кода, 2FA, политки безопасности
Управление версиями	Git-based, релизы и теги	Git-based, релизы и теги	Git-based версионирование	Git-based, релизы и теги	Git-based система, релизы, теги
Кастомизация и расширяемость	GitHub Actions, вебхуки, API	Расширение через CI/CD, вебхуки, API	Интеграция с любыми скриптами, Kustomize, Helm	Кастомизация CI/CD, вебхуки, API	Кастомизация через CI/CD, вебхуки, API
Управление доступом и правами	RBAC, управление доступом на уровне репозитория	RBAC, группы, управление доступом	RBAC через Kubernetes	RBAC, группы, управление доступом	Управление доступом через роли и группы
Документация и поддержка сообщества	Обширная документация, активное сообщество	Обширная документация, активное сообщество	Хорошая документация, активное сообщество	Документация, форумы, ресурсы поддержки	Документация на русском языке, локальные форумы, ресурсы поддержки
Интерфейс управления	Веб-интерфейс для управления репозиториями и CI/CD	Веб-интерфейс для управления репозиториями и CI/CD	Командная строка, интеграция с Argo CD	Веб-интерфейс для управления репозиториями и CI/CD	Веб-интерфейс для управления репозиториями, CI/CD, задачами и пользователями
Совместимость с Microservices архитектурой	Поддержка независимых репозиториев и пайплайнов	Поддержка микросервисов через независимые репозитории и пайплайны	Поддержка микросервисов с индивидуальными репозиториями и конфигурациями	Поддержка независимых репозиториев и пайплайнов	Управление микросервисами через отдельные репозитории и пайплайны
Стоимость и лицензирование	Бесплатные и платные планы	Бесплатные и платные планы	Open-source, лицензия Apache 2.0	Гипотетически бесплатный и платные планы	Бесплатные и платные тарифные планы
Инструменты миграции	Импорт из других VCS	Инструменты миграции из других VCS	Настройка для работы с существующими ресурсами через Git	Инструменты миграции из других VCS	Инструменты для миграции репозиториев и данных из других систем контроля версий
 Интеграция с существующими DevOps инструментами	Docker, Kubernetes, Terraform, CI/CD	Docker, Kubernetes, Terraform, CI/CD	Интеграция с любыми DevOps инструментами через Kustomize, Helm, API	Docker, Kubernetes, Terraform, Ansible, CI/CD

На основе данных из приведенный сравнительной таблицы можно сделать вывод о том, что инструменты, сравниваемые по ряду параметров практически идентичны. Из чего следует о том, что необходимо выбрать несколько свойств и провести более подробное их рассмотрение. Наиболее явные отличия прослеживаются по параметру «Автоматическое развертывание», здесь для GitHub Actions будет рассмотрен GitHub Runner, для GitLab CI/CD рассмотрим работу GitLab Runner, а также реализации ранеров в Flux, GitVerse, GitFlic.
2.2 Описание тестового окружения сравнительного эксперимента
Тестовое окружение для локального замера скорости работы раннеров должно обладать несколькими ключевыми характеристиками, обеспечивающими эффективное и повторяемое тестирование. Прежде всего, следует гарантировать изоляцию каждого теста, чтобы исключить взаимное влияние различных тестов друг на друга. Для этой цели используются контейнеризационные технологии, такие как Docker, позволяющие запускать тесты в изолированных контейнерах, что обеспечивает консистентность и детерминированность тестовой среды. Для обеспечения одинаковых условий тестирования при каждом запуске следует автоматизировать процесс развертывания окружения. Это включает установку всех зависимостей и конфигурацию параметров, необходимых для корректной работы тестов. Docker, благодаря своим встроенным средствам автоматизации развертывания, также является важным инструментом. Dockerfile, текстовый файл, содержащий инструкции для сборки Docker-образа, играет важную роль в этом процессе. Каждая инструкция Dockerfile описывает определённый шаг процесса создания образа, что в результате формирует многослойную структуру образа. Эта структура позволяет эффективно использовать кэширование во время сборки. Если Docker обнаруживает, что некоторые инструкции Dockerfile остались неизменными, он может использовать кэшированные слои вместо их повторной генерации, что значительно ускоряет процесс сборки и уменьшает размер конечного образа. Для обеспечения честного сравнения производительности различных раннеров, таких как GitHub Actions, GitLab CI и Flux необходимо уделить внимание контролю за использованием ресурсов, таких как память и процессорное время, для каждого теста. Для этого каждому контейнеру можно задать лимиты на использование памяти и процессора, что позволяет создать равные условия для всех тестов. Если приложение зависит от внешних данных, требуется предусмотреть механизмы сохранения локальных копий этих данных для обеспечения стабильного доступа к ним во время тестирования. Это позволяет избежать проблем, связанных с изменениями во внешних источниках данных, и обеспечивает непрерывность тестирования. Если локальное сохранение данных невозможно, необходимо минимизировать влияние внешних факторов на результаты тестов. К примеру, если данные загружаются через HTTP-запросы, важно разделить процесс запроса данных и непосредственно тестируемый функционал. Кроме того, для обеспечения справедливого сравнения, каждое тестовое задание должно быть одинаковым для всех раннеров. Например, тестовый скрипт, выполняющий вычисления и замеряющий время выполнения, должен быть идентичным в каждом из окружений. Это гарантирует, что все тестируемые системы выполняют одинаковую работу в одинаковых условиях. В результате созданное тестовое окружение должно позволять проводить тесты в условиях максимальной изоляции и контролируемого использования ресурсов, обеспечивая справедливое и объективное сравнение производительности различных CI/CD систем. Такое окружение также обеспечивает возможность быстрого и простого восстановления среды для новых тестов, что увеличивает эффективность процесса тестирования и анализа результатов. Таким образом, использование контейнеризации с Docker и точной настройки раннеров для GitHub Actions, GitLab CI и GitVerse обеспечивает надежное, масштабируемое и детерминированное тестовое окружение. Такое окружение позволяет достигать высокой точности и повторяемости результатов, необходимой для объективного сравнения производительности различных CI/CD систем.

	МЕТОДОЛОГИЯ ПРОВЕДЕНИЯ ЭКСПЕРИМЕНТАЛЬНОГО ИССЛЕДОВАНИЯ
2.1 Обоснование выбора критериев оценки эффективности GitOps-решений
В рамках исследования эффективности GitOps-решений были определены ключевые критерии оценки, которые позволяют провести комплексный анализ платформ GitHub, GitLab и GitVerse. Эти критерии обусловлены как техническими требованиями к современным системам непрерывной поставки, так и бизнес-потребностями организаций. Одним из важнейших показателей является скорость развертывания, которая определяется временем от коммита до продакшена. Этот критерий критически важен для DevOps-процессов, так как напрямую влияет на скорость вывода новых функций на рынок и способность организации быстро реагировать на изменения требований. Оценка скорости развертывания включает в себя время сборки приложения, время прохождения автоматических тестов и время развертывания в целевое окружение. Надежность процесса синхронизации также является фундаментальным аспектом GitOps, так как она определяет точность отражения желаемого состояния, устойчивость к сетевым проблемам и обработку конфликтующих изменений. Масштабируемость решения оценивается по способности эффективно работать при увеличении нагрузки и количества управляемых ресурсов [7], что включает в себя производительность при большом количестве репозиториев, эффективность при множественных одновременных деплоях и потребление ресурсов при масштабировании. Простота внедрения и поддержки оценивается по трудозатратам на внедрение и эксплуатацию решения, качеству документации, требованиям к квалификации персонала и автоматизации рутинных операций. Интеграция с существующими инструментами оценивается по способности решения встраиваться в существующую инфраструктуру, поддержке популярных CI/CD инструментов, интеграции с системами мониторинга и совместимости с инструментами управления конфигурацией. Выбранные критерии позволяют провести всесторонний анализ GitOps-решений и определить их соответствие как техническим, так и бизнес-требованиям современных организаций. Каждый критерий имеет количественные и качественные показатели, что обеспечивает объективность оценки.
	 Разработка методики проведения сравнительного анализа
	Методика сравнительного анализа GitOps-решений должна обеспечивать объективную оценку платформ GitHub, GitLab и GitVerse. Методика включает в себя определение базовый сценарий тестирования, например стандартная сборка, тестирование и развертывание приложения. Методы измерения производительности включают автоматизированный сбор временных метрик, мониторинг потребления ресурсов, анализ логов и событий. Протокол проведения тестов предусматривает структурированный подход, начиная с подготовки тестового окружения и верификации начального состояния, выполнения тестового сценария, сбора метрик и логов, и заканчивая восстановлением исходного состояния. Документирование результатов осуществляется через стандартизированную систему, включающую структурированные отчеты по каждому тесту, автоматическую агрегацию метрик, сохранение артефактов тестирования и версионирование результатов. Статистическая обработка данных предполагает расчет средних показателей и отклонений, выявление аномалий и выбросов, корреляционный анализ. Критерии успешности тестов определяются временем выполнения операций в пределах допустимых значений, отсутствием критических ошибок. Процедуры валидации результатов включают перекрестную проверку, многократное повторение тестов, верификацию независимыми инструментами и анализ согласованности данных. Данная методика обеспечивает систематический подход к сравнительному анализу GitOps-решений, позволяя получить объективные и воспроизводимые результаты. Каждый компонент методики направлен на минимизацию субъективных факторов и обеспечение научной строгости исследования.
	 Проектирование тестового стенда
Архитектура тестового стенда для проведения сравнительного анализа GitOps-решений должна учитывать все необходимые компоненты для объективной оценки платформ. Архитектура [9] представляет собой модульную систему, включающую компоненты для оценки исследуемых платформ. Основные компоненты архитектуры можно разделить на несколько ключевых модулей: Модули развертывания включают изолированные окружения для каждой тестируемой платформы (GitHub Actions, GitLab CI/CD, GitVerse), контейнеризированные среды выполнения на базе Docker, а также конфигурационные файлы для CI/CD (.github/workflows, .gitlab-ci.yml, .gitverse/workflows). Инфраструктурные компоненты представлены раннерами для выполнения задач CI/CD, расположенными в директории runners/, комплексной мониторинговой подсистемой (директория monitoring/) и системой сбора метрик производительности (директория metrics/). Тестовое приложение содержит базовое приложение для проведения экспериментов, размещенное в директории test_app/, необходимые конфигурационные файлы Docker (.dockerignore, Dockerfile), а также файлы окружения (.env) для каждой тестируемой платформы. Инструменты измерения и анализа включают скрипты сбора метрик (collect-metrics.sh), конфигурационные файлы для настройки экспериментов (config.yaml) и систему автоматизации экспериментов (run-experiment.sh). Компоненты оркестрации представлены Docker Compose файлами для управления контейнерами, скриптами запуска и управления раннерами (start-runner.sh), а также конфигурационными файлами для настройки окружения. Разработанная архитектура обеспечивает ряд характеристик:
	изоляция тестовых окружений;
	воспроизводимость экспериментов;
	автоматизированный сбор метрик;
	масштабируемость и модульность системы.
Такая организация тестового стенда позволит проводить объективное сравнение различных GitOps-решений в контролируемых условиях, получая достоверные результаты для дальнейшего анализа.
	 Определение метрик и показателей эффективности
	В данном разделе описываются основные метрики, используемые для оценки производительности раннеров CI/CD платформ. Временные метрики включают в себя время выполнения CI операций, которое измеряется с помощью скриптов, фиксирующих начало и конец выполнения операций, и представляется в миллисекундах. Компоненты времени, такие как время сборки и тестирования, также учитываются для более детального анализа. Ресурсные метрики охватывают использование CPU и памяти раннером, которые мониторятся через системные утилиты, предоставляющие данные о проценте использования CPU и объеме потребляемой памяти в мегабайтах. Формат данных для хранения метрик включает JSON файлы, содержащие информацию о временных и ресурсных метриках CI операций. Обработка данных предполагает расчет базовой статистики, такой как средние значения, а также стандартное отклонение. Агрегация результатов осуществляется путем объединения данных из различных итераций, что позволяет получить представление о производительности раннеров. Визуализация результатов включает построение графиков, отображающих среднее время выполнения CI операций и использование ресурсов раннером, что способствует сравнению производительности различных платформ. Пороговые значения для временных и ресурсных метрик устанавливаются для оценки соответствия производительности раннеров заданным критериям. Выбранные метрики обеспечивают простоту измерений, воспроизводимость, объективность оценки раннеров и сравнимость результатов.

	 Выбор инструментов мониторинга и сбора данных
	Контейнеризация раннеров осуществляется с использованием Docker, что позволяет создать унифицированную среду проведения исследования производительности раннеров CI/CD. Базовые утилиты, такие как time и ps, используются для измерения времени выполнения CI операций и мониторинга процессов раннера. Скрипты измерений включают функции для запуска процесса раннера и сбора метрик, а также для выполнения CI операций с измерением времени. Обработка результатов осуществляется с помощью Python, где данные раннера анализируются для получения базовой статистики использования CPU и памяти. Системные требования описываются следующим образом: ОС Ubuntu 20.04 LTS, ПО для контейнеризации — Docker 20.10+ и языковая среда Python версии 3.8+, а также необходимые Python зависимости, такие как pandas и matplotlib. Выбранные инструменты обеспечивают простоту использования, воспроизводимость среды раннеров, точность измерений и автоматизацию тестов CI.
 
	РАЗРАБОТКА ЭКСПЕРИМЕНТАЛЬНОГО СТЕНДА
3.1 Архитектура тестового веб-приложения
	В рамках экспериментального исследования разработана архитектура тестового веб-приложения, предназначенного для оценки эффективности GitOps-решений. Общая архитектура включает структуру, состоящую из Backend API на Node.js. Backend API реализует REST endpoints. Backend поддерживает RESTful API. 
  

Рис.2. Код приложения
 
Рис.3 Код тестов

  

Рис.4. Код Docker файла

Разработанная архитектура тестового веб-приложения обеспечивает необходимую функциональность для тестирования GitOps-решений.
	 Реализация базовой инфраструктуры
	В данном разделе описывается подготовка базовой инфраструктуры [8] для проведения экспериментального исследования GitOps-решений. Инфраструктурные компоненты включают GitOps-специфичные компоненты для GitHub Actions, Gitlab Runners, GitVerse.
  

Рис.5. Код docker-compose GitHub раннера 

  

Рис.6. Код docker-compose GitLab раннера


  

Рис.7. Код docker-compose GitVerse раннера

Основные компоненты инфраструктуры включают контейнеризированные раннеры с одинаковой конфигурацией для всех платформ, фиксированными ограничениями ресурсов и изолированной средой выполнения. Конфигурация раннеров осуществляется через Docker Compose, который включает установку необходимых инструментов, а также параметров для сбора метрик и контроля эксперимента. Скрипт сбора метрик фиксирует время выполнения команд и собирает данные о CPU и памяти. Настройка окружения для GitHub Actions, GitLab CI и GitVerse включает создание конфигурационных файлов, таких как .github/workflows/test.yml, .gitlab-ci.yml и .gitverse/pipeline.yml, которые определяют этапы сборки, тестирования и развертывания. Процесс развертывания включает подготовку раннера, настройку репозитория и конфигурацию CI/CD. Данная инфраструктура обеспечивает контролируемую среду выполнения, воспроизводимость экспериментов, точные измерения производительности и простоту развертывания и поддержки.
	 Настройка выбранных GitOps-инструментов
	Рассмотрим настройки выбранных GitOps-инструментов [11]. Для GitHub Actions базовая конфигурация включает создание workflow, который запускается при пуше в ветку и выполняет сборку, тестирование приложения с использованием контейнера [10].
  

Рис.8. Ci файл GitHub

Для GitLab CI базовая конфигурация определяет стадии сборки, тестирования, используя образ раннера и переменные окружения для настройки Docker.
  

Рис.9. Ci файл GitLab

 	GitVerse использует конфигурацию, которая определяет ресурсы и стадии выполнения, включая сборку, тестирование.
  

Рис.10. Ci файл GitVerse

Процесс настройки также включает создание репозиториев, настройку переменных окружения и проверку конфигурации через локальное тестирование. Данная конфигурация обеспечивает единообразие настроек на всех платформах, контролируемое выполнение операций, сбор метрик производительности и воспроизводимость результатов.
3.4 Разработка сценариев тестирования
	В данном исследовании проведен анализ производительности трех популярных платформ непрерывной интеграции и доставки (CI/CD): GitLab, GitHub и GitVerse. Должна быть проведена оценка эффективности выполнения типовых процессов сборки (build), тестирования (test) и проверки типов (typecheck) в различных конфигурациях системных ресурсов. 
Для каждой комбинации платформы и конфигурации было выполнено по 5 измерений следующих метрик:
	CPU-метрики:
	общее время использования CPU (usage_usec),
	время выполнения пользовательского кода (user_usec),
	время выполнения системных вызовов (system_usec),
	метрики памяти:
	текущее потребление RAM (current_bytes),
	пиковое потребление RAM (peak_bytes),
	использование swap-памяти (swap_bytes),
	временные метрики:
	длительность выполнения каждого этапа,
	временные метки начала и окончания процессов.

Разработанные сценарии тестирования обеспечивают измерение только контролируемых параметров, воспроизводимость результатов, корректный сбор и валидацию метрик, а также возможность сравнительного анализа платформ.
3.5 Автоматизация процессов сбора и анализа данных
	Автоматизация процессов сбора и анализа данных для оценки производительности GitOps-решений. В пайплайн, выполняющийся над базовым приложением, интегрирован этап со сбором метрик. На данном этапе производится сбор метрик по средствам вызова bash-скрипта collect-metric.sh, который фиксирует метрики производительности, такие как использование CPU и памяти, и сохраняет их в формате JSON. 
  

Рис.11. Положение скрипта в среде исполнения

Скрипт для запуска тестов автоматизирует процесс тестирования, включая запуск тестового приложения, сбор метрик и выполнение тестов.
  

Рис.12. JSON с метриками

Обработка данных включает агрегацию результатов, где данные из различных итераций объединяются в единую структуру. Генерация отчетов осуществляется с помощью Python, где создаются графики, отображающие среднее использование ресурсов и время выполнения операций. Автоматизация запуска тестов реализована через основной скрипт, который управляет выполнением тестов на платформах и обрабатывает результаты. Формат результатов включает структуру данных в JSON. Разработанная система автоматизации обеспечивает автоматический сбор метрик производительности, обработку данных, генерацию отчетов и воспроизводимость экспериментов.
 
	ПРОВЕДЕНИЕ ЭКСПЕРИМЕНТАЛЬНОГО ИССЛЕДОВАНИЯ
4.1 Реализация тестовых сценариев развертывания
	В ходе реализации тестовых сценариев, согласно методологии, был проведен эксперимент, включающий 5 итераций. На основе снятых метрик были получены следящие графики:
 
Рис.13. CPU системы


 
Рис.14. CPU затраченное
 
Рис.15. CPU пользовательское



 
Рис.16. Длительность

 
Рис.17. Текущее использование памяти

 
Рис.18. Пиковое использование памяти

4.3 Анализ производительности GitOps-решений
	В данном разделе представлены результаты анализа производительности раннеров CI/CD платформ на основе собранных экспериментальных данных. Временные характеристики включают время выполнения CI операций, где GitVerse демонстрирует лучшее время выполнения, за ним следуют GitLab CI и GitHub Actions.

Таблица .1.
Коэффициенты вариации
Платформа	Предварительное измерение	Пост измерение
BUILD
Github	CV=35.91% (red)	CV=33.62% (red)
Gitlab	CV=18.23% (orange)	CV=16.71% (orange)
Gitverse	CV=9.75% (green)	CV=10.16% (orange)
TEST
Github	CV=33.43% (red)	CV=32.78% (red)
Gitlab	CV=16.35% (orange)	CV=14.67% (orange)
Gitverse	CV=10.12% (orange)	CV=9.99% (green)
TYPECHECK
Github	CV=32.35% (red)	CV=32.27% (red)
Gitlab	CV=14.41% (orange)	CV=13.61% (orange)
Gitverse	CV=9.84% (green)	CV=9.80% (green)

Стабильность времени выполнения оценивается через коэффициент вариации, который показывает, что все платформы стабильны, с наименьшим значением у GitLab. Коэффициент вычислялся по формуле:
(1)                                                     CV =( σ/μ)*100%
	Для интерпретации коэффициента вариации используются следующие пороговые значения:
	менее 10% - низкий уровень риска (green);
	10-20% - умеренный риск 20-30% - высокий риск (orange);
	более 30% - чрезмерно высокий риск (red).
Если CV меньше 33%, то, как правило, выборка считается однородной. Использование ресурсов анализируется через среднее и максимальное использование CPU и памяти, где GitLab показывает наименьшее потребление ресурсов, а GitHub CI — наибольшее. Графики производительности отображают время выполнения CI операций и использование ресурсов, что позволяет наглядно сравнить платформы. Сравнительный анализ выявляет, что GitLab обладает лучшей производительностью и эффективностью, в то время как GitVerse демонстрирует сбалансированные показатели и высокую стабильность работы, но с более высоким потреблением ресурсов относительно GitLab. Основные результаты показывают, что все раннеры демонстрируют хорошую производительность и стабильность, с разницей во времени выполнения не более 30%. Рекомендации включают выбор платформы на основе конкретных требований проекта и оптимизацию использования ресурсов. Проведенный анализ показывает высокую производительность всех платформ, стабильность работы раннеров и эффективное использование ресурсов.
4.4 Оценка побочных эффектов и ограничений
Технические ограничения включают ограничения ресурсов, такие как CPU и память, которые могут быть недостаточными для сложных сборок и параллельных задач, что может привести к замедлению выполнения. Ограничения платформ варьируются от времени выполнения до лимитов на параллельные задачи и API вызовы. Побочные эффекты включают влияние на производительность, где «холодный старт» и параллельные задачи могут замедлять выполнение, а также использование диска, где кэш и временные файлы занимают значительное пространство. Проблемы совместимости связаны с версиями инструментов и сетевыми проблемами, такими как доступ к ресурсам и сетевые таймауты. Рекомендации по минимизации проблем включают оптимизацию ресурсов, управление кэшем и документированные решения для известных ограничений.
4.5 Формирование рекомендаций по применению GitOps-подходов
	В данном разделе представлены рекомендации по улучшению производительности и эффективности CI/CD платформ. Основные рекомендации включают оптимизацию использования ресурсов, улучшение управления кэшем и внедрение автоматизированных процессов мониторинга. Оптимизация ресурсов предполагает использование более эффективных алгоритмов и инструментов для снижения нагрузки на CPU и память. Улучшение управления кэшем включает в себя регулярную очистку и оптимизацию хранения временных файлов. Автоматизация процессов мониторинга позволяет своевременно выявлять и устранять проблемы, что способствует повышению стабильности и производительности платформ. Внедрение данных рекомендаций позволит значительно улучшить производительность и эффективность CI/CD платформ, обеспечивая более стабильную и надежную работу.
 
ЗАКЛЮЧЕНИЕ

